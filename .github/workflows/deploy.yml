name: Deploy Infrastructure

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:

jobs:
  migrate-database:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Setup database
        env:
          DATABASE_URL: ${{ secrets.DB_CONNECTION_STRING }}
        run: |
          # Create SQL script for database setup
          echo "
          CREATE EXTENSION IF NOT EXISTS pgcrypto;

          CREATE TABLE IF NOT EXISTS \"ParsedEmail\" (
            id TEXT PRIMARY KEY DEFAULT gen_random_uuid()::text,
            domain TEXT NOT NULL,
            local_part TEXT NOT NULL,
            email_id TEXT NOT NULL,
            is_function_called BOOLEAN NOT NULL DEFAULT false,
            function_run_id TEXT,
            function_url TEXT,
            function_response TEXT,
            function_status_code INTEGER,
            is_webhook_sent BOOLEAN NOT NULL DEFAULT false,
            webhook_url TEXT,
            webhook_payload JSONB,
            webhook_response TEXT,
            webhook_status_code INTEGER,
            email_data JSONB NOT NULL,
            created_at TIMESTAMP(3) NOT NULL DEFAULT CURRENT_TIMESTAMP
          );" > setup.sql

          # Extract connection parameters from DATABASE_URL
          DB_HOST=$(echo $DATABASE_URL | sed -n 's/.*@\([^:]*\).*/\1/p')
          DB_PORT=$(echo $DATABASE_URL | sed -n 's/.*:\([0-9]*\)\/.*/\1/p')
          DB_NAME=$(echo $DATABASE_URL | sed -n 's/.*\/\([^?]*\).*/\1/p')
          DB_USER=$(echo $DATABASE_URL | sed -n 's/.*:\/\/\([^:]*\):.*/\1/p')
          DB_PASS=$(echo $DATABASE_URL | sed -n 's/.*:\/\/[^:]*:\([^@]*\).*/\1/p')

          # Execute SQL script
          PGPASSWORD=$DB_PASS psql -h $DB_HOST -p $DB_PORT -d $DB_NAME -U $DB_USER -f setup.sql

  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: "us-east-1"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Package Check Lambda function
        run: |
          mkdir -p lambda_packages
          cd lambda/check && ./package.sh

      - name: Package Parser Lambda function
        run: |
          cd lambda/parser && ./package.sh

      - name: Terraform Init
        run: |
          cd infra
          terraform init

      - name: Terraform Apply
        run: |
          cd infra
          terraform apply -var="aws_account_id=${{ secrets.AWS_ACCOUNT_ID }}" -var="db_connection_string=${{ secrets.DB_CONNECTION_STRING }}" -auto-approve

      - name: Clean up Lambda packages
        run: |
          rm -rf lambda_packages
